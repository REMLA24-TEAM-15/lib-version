name: Python Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Set Git Identity
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"


      - name: Extract Version from Tag
        id: get_version
        run: echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/v}"

      - name: Update version.py
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Updating version.py with version ${{ steps.get_version.outputs.VERSION }}"
          echo "__version__ = '${{ steps.get_version.outputs.VERSION }}'" > lib_version_URLPhishing/version.py
          cat lib_version_URLPhishing/version.py  # This line will print the content of version.py to the log
          git add lib_version_URLPhishing/version.py
          git commit -m "Update version.py to ${{ steps.get_version.outputs.VERSION }}"
          git push origin

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Update pyproject.toml Version
        run: |
          poetry version ${{ steps.get_version.outputs.VERSION }}

      - name: Install dependencies
        run: |
          poetry install

      - name: Lint with Flake8
        run: |
          poetry run flake8 ./lib_version_URLPhishing

      - name: Bump version and tag if on main
        if: github.ref == 'refs/heads/main'
        run: |
          poetry version patch
          git commit -am "Bump version"
          new_tag=$(poetry version --short)
          git tag $new_tag
          git push origin --tags

      - name: Install pdoc
        run: |
          pip install pdoc3

      - name: Generate documentation
        run: |
          pdoc --html lib_version_URLPhishing --output-dir docs

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/lib_version_URLPhishing

      - name: Build and publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          python -c "from lib_version_URLPhishing.version import __version__; print(f'Version in version.py: {__version__}')"
          sleep 3
          poetry build
          poetry publish -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}